# -*- mode: c; c-basic-offset: 4; indent-tabs-mode: nil; -*-
# vim:expandtab:shiftwidth=4:tabstop=4:

General
{
	fs_path = /mnt/lustre;
	fs_type = lustre;
}

# ChangeLog Reader configuration
# Parameters for processing MDT changelogs :
ChangeLog
{
    # 1 MDT block for each MDT :
    MDT
    {
        # name of the first MDT
        mdt_name  = "MDT0000" ;

        # id of the persistent changelog reader
        # as returned by "lctl changelog_register" command
        reader_id = "cl1" ;
    }
    force_polling = TRUE;
    polling_interval = 1s;
    mds_has_lu543 = FALSE;
    mds_has_lu1331 = FALSE;
}

Log
{
    # Log verbosity level
    # Possible values are: CRIT, MAJOR, EVENT, VERB, DEBUG, FULL
    debug_level = EVENT;

    # Log file
    log_file = stdout;

    # File for reporting purge events
    report_file = stdout;

    # set alert_file, alert_mail or both depending on the alert method you wish
    alert_file = "/tmp/rh_alert.log";

    stats_interval = 10s;
}

ListManager
{
	MySQL
	{
		server = "localhost";
		db = "robinhood_lustre";
        user = "robinhood";
		# password or password_file are mandatory
		password = "robinhood";
        engine = innodb;
	}

	SQLite {
	        db_file = "/tmp/robinhood_sqlite_db" ;
        	retry_delay_microsec = 1000 ;
	}
}

# for tests with backup purpose
backend
{
    root = "/tmp/backend";
    mnt_type=ext4;
    check_mounted = FALSE;
}

FS_Scan
{
    # number of threads used for scanning the filesystem
    nb_threads_scan        =     16 ;
    Ignore { path == "/mnt/lustre/.lustre" }
}

EntryProcessor
{
    nb_threads = 16;
#    max_batch_size = 1;
#    STAGE_DB_APPLY_threads_max = 8;
}

Filesets {
    Fileclass dir2 {
        definition { tree == "**/dir.2" }
    }
    Fileclass dir3 {
        definition { tree == "**/dir.3" }
        lhsm_archive_action_params { cos = 1; }
        lhsm_release_action_params { foo = 1; }
        lhsm_archive_action_params { foo = 1; }
    }
}

define_policy lhsm_archive
{
    status_manager = lhsm(archive);
    scope { type == file and (status == new or status == modified) }
    default_action = lhsm.archive;
    default_lru_sort_attr = last_mod;

#    default_action_params {
#        foo = bar;
#    }
}

lhsm_archive_parameters
{
    nb_threads = 2;
    max_action_count = 100;

    action = cmd("lfs hsm_archive {fullpath}");

    action_params {
        foo = bar;
        derive = "{foo}";
    }
}

lhsm_archive_trigger
{
    trigger_on = periodic;
    check_interval = 30s;

    action_params {
        foo = bar;
    }
}

lhsm_archive_rules
{
    ignore { type != file }
    ignore_fileclass = dir2;
    rule arch_dir3 {
        target_fileclass = dir3;
        condition { last_mod > 10 }
        action = cmd("lfs hsm_archive /mnt/lustre/.lustre/fid/{fid}");
        action_params {
            cos = 42;
            xyz = "{fileclass} {rule}";
            # These values are not sent
            lsp_pool = "";
            lsp_stripe_size = 0;
            lsp_stripe_offset = -1;
            lsp_stripe_pattern = 0;
            lsp_stripe_count = 2;
            lsp_osts = [];

            # But these are
            mdt_index = -1;
            lsp = '{"pool":"{lsp_pool}","stripe_size":{lsp_stripe_size},"stripe_offset":{lsp_stripe_offset},"stripe_pattern":{lsp_stripe_pattern},"stripe_count":{lsp_stripe_count},"osts":{lsp_osts}}'; 
        }
    }
}

define_policy lhsm_release
{
    status_manager = lhsm(release);
    scope { type == file and status == synchro }
    default_action = lhsm.release;
    default_lru_sort_attr = last_access;
}

lhsm_release_parameters
{
    nb_threads = 2;
}

lhsm_release_trigger
{
    trigger_on = ost_usage;
    check_interval = 30s;

    high_threshold_pct = 10%;
    low_threshold_pct = 09%;
    
}

lhsm_release_rules
{
    ignore { type != file or size == 0}

    rule arch_dir3 {
        target_fileclass = dir3;
        condition { last_access > 10 }
    }
}

define_policy lhsm_remove
{
    status_manager = lhsm(removed);
    scope { type == file }
    default_action = lhsm.hsm_remove;
    default_lru_sort_attr = rm_time;
}

define_policy check
 {
    status_manager = basic;
    scope {type == file and status == ""}
    default_lru_sort_attr = last_access; #TODO random;
    default_action = cmd("/usr/bin/md5sum {path}");
}
check_parameters {
    nb_threads = 2;
}
check_trigger {
    trigger_on = periodic;
    check_interval = 10min;
}
check_rules {
    rule default {
        condition {last_access > 30s}
    }
}

define_policy check2 {
    status_manager = basic; # first basic
    scope { type == file and status != "ok"}
    default_lru_sort_attr = last_access; #random;
    default_action = cmd("/usr/bin/file {path}");
}
check2_parameters {
    nb_threads = 2;
}
check2_trigger {
    trigger_on = periodic;
    check_interval = 10min;
}
check2_rules {
    rule default {
        condition {last_access > 30s}
    }
}

define_policy cleanup {
    status_manager = none;
    scope { type == file }
    default_action = common.unlink;
    default_lru_sort_attr = last_access;
}
cleanup_trigger
{
    trigger_on = user_usage;
    check_interval = 6h;
    # clean when user usage > 1PB;
    high_threshold_vol = 1PB;
    low_threshold_vol  = 950TB;
}
cleanup_rules {
    rule default {
        condition { last_access > 1d }
    }
}

define_policy backup {
    status_manager = backup(archive);
    scope { type == file and (status == new or status == modified) }
    default_action = common.copy;
    default_lru_sort_attr = creation;
}

backup_parameters
{
    nb_threads = 2;
    max_action_count = 100;
}

backup_trigger
{
    trigger_on = periodic;
    check_interval = 30s;
}

backup_rules
{
    ignore { type != file }
    ignore_fileclass = dir2;
    rule arch_dir3 {
        target_fileclass = dir3;
        condition { last_mod > 10 }
    }
}

backup_config {
    root = /tmp/backend2;
    check_mounted = no;
}
